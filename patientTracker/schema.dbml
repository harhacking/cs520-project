Table LogEntry {
  id auto [pk, unique]
  action_time date_time 
  user foreign_key 
  content_type foreign_key [null]
  object_id text [null]
  object_repr char 
  action_flag positive_small_integer 
  change_message text 
  Note: '''LogEntry(id, action_time, user, content_type, object_id, object_repr, action_flag, change_message)'''
}
ref: LogEntry.user > CustomUser.id
ref: LogEntry.content_type > ContentType.id


Table Permission {
  id auto [pk, unique]
  name char 
  content_type foreign_key 
  codename char 
  Note: '''
    The permissions system provides a way to assign permissions to specific
    users and groups of users.

    The permission system is used by the Django admin site, but may also be
    useful in your own code. The Django admin site uses permissions as follows:

        - The "add" permission limits the user's ability to view the "add" form
          and add an object.
        - The "change" permission limits a user's ability to view the change
          list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.
        - The "view" permission limits the ability to view an object.

    Permissions are set globally per type of object, not per specific object
    instance. It is possible to say "Mary may change news stories," but it's
    not currently possible to say "Mary may change news stories, but only the
    ones she created herself" or "Mary may only change news stories that have a
    certain status or publication date."

    The permissions listed above are automatically created for each model.
    '''
}
ref: Permission.content_type > ContentType.id


Table Group {
  id auto [pk, unique]
  name char [unique]
  Note: '''
    Groups are a generic way of categorizing users to apply permissions, or
    some other label, to those users. A user can belong to any number of
    groups.

    A user in a group automatically has all the permissions granted to that
    group. For example, if the group 'Site editors' has the permission
    can_edit_home_page, any user in that group will have that permission.

    Beyond permissions, groups are a convenient way to categorize users to
    apply some label, or extended functionality, to them. For example, you
    could create a group 'Special users', and you could write code that would
    do special things to those users -- such as giving them access to a
    members-only portion of your site, or sending them members-only email
    messages.
    '''
}


Table auth_group_permissions {
  permission_id auto [pk]
  group_id auto [pk]
}
ref: Group.id > auth_group_permissions.group_id
ref: Permission.id > auth_group_permissions.permission_id


Table ContentType {
  id auto [pk, unique]
  app_label char 
  model char 
  Note: '''ContentType(id, app_label, model)'''
}


Table Session {
  session_key char [pk, unique]
  session_data text 
  expire_date date_time 
  Note: '''
    Django provides full support for anonymous sessions. The session
    framework lets you store and retrieve arbitrary data on a
    per-site-visitor basis. It stores data on the server side and
    abstracts the sending and receiving of cookies. Cookies contain a
    session ID -- not the data itself.

    The Django sessions framework is entirely cookie-based. It does
    not fall back to putting session IDs in URLs. This is an intentional
    design decision. Not only does that behavior make URLs ugly, it makes
    your site vulnerable to session-ID theft via the "Referer" header.

    For complete documentation on using Sessions in your code, consult
    the sessions documentation that is shipped with Django (also available
    on the Django web site).
    '''
}


Table Patient {
  id big_auto [pk, unique]
  user one_to_one [unique]
  medical_history text 
  medications text 
  diagnoses text 
  blood_group char 
  height decimal 
  weight decimal 
  Note: '''Patient(id, user, medical_history, medications, diagnoses, blood_group, height, weight)'''
}
ref: Patient.user - CustomUser.id


Table Doctor {
  id big_auto [pk, unique]
  user one_to_one [unique]
  specialization char 
  Note: '''Doctor(id, user, specialization)'''
}
ref: Doctor.user - CustomUser.id


Table Appointment {
  id big_auto [pk, unique]
  appointment_time big_integer 
  doctor foreign_key 
  patient foreign_key 
  patient_notes text 
  doctor_notes text 
  Note: '''Appointment(id, appointment_time, doctor, patient, patient_notes, doctor_notes)'''
}
ref: Appointment.doctor > Doctor.id
ref: Appointment.patient > Patient.id


Table CustomUser {
  id big_auto [pk, unique]
  password char 
  last_login date_time [null]
  is_superuser boolean [note:"Designates that this user has all permissions without explicitly assigning them."]
  username char [note:"Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.", unique]
  first_name char 
  last_name char 
  email email 
  is_staff boolean [note:"Designates whether the user can log into this admin site."]
  is_active boolean [note:"Designates whether this user should be treated as active. Unselect this instead of deleting accounts."]
  date_joined date_time 
  is_doctor boolean 
  Note: '''CustomUser(id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined, is_doctor)'''
}


Table CustomUser_customuser_groups {
  group_id auto [pk]
  customuser_id auto [pk]
}
ref: CustomUser.id > CustomUser_customuser_groups.customuser_id
ref: Group.id > CustomUser_customuser_groups.group_id


Table CustomUser_customuser_user_permissions {
  permission_id auto [pk]
  customuser_id auto [pk]
}
ref: CustomUser.id > CustomUser_customuser_user_permissions.customuser_id
ref: Permission.id > CustomUser_customuser_user_permissions.permission_id


